# -*- coding: utf-8 -*-
"""Azure_Agent_CodeIntpreter.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1haTFiLN7UIeyPYIfKUnmb-quAyw9wYWd

#Creating and Running an Agent with Azure AI Projects

In this tutorial, we will walk through the steps to create and interact with a custom AI agent using Azure AI Projects. By leveraging Azureâ€™s agent and tool functionality, we can enhance the capabilities of language models, enabling them to perform specific tasks and respond with real-time data or complex logic. The workflow includes creating an agent, configuring it with tools like a code interpreter, interacting with the agent, and handling messages, responses, and file outputs.

The key steps involve:

1. Setting up the environment and credentials
2. Creating an AI agent with CodeInterpreterTool
3. Managing conversation threads and messages
4. Processing agent responses, including saving files and handling errors
5. Deleting the agent once done

"""

!pip install azure-ai-projects==1.0.0b8 azure-identity==1.21.0 load_dotenv

# Set up your environment variables for the Azure OpenAI endpoint and API key.

import os
from dotenv import load_dotenv
load_dotenv('api_settings.env')
CLIENT_ID = os.getenv("CLIENT_ID")
CLIENT_SECRET = os.getenv("CLIENT_SECRET")
TENANT_ID = os.getenv("TENANT_ID")
PROJECT_CONNECTION_STRING = os.getenv("PROJECT_CONNECTION_STRING")
print(PROJECT_CONNECTION_STRING)

# Authentication / Uploading File / Create Agent / Create Thread

import os
from azure.ai.projects import AIProjectClient
from azure.ai.projects.models import CodeInterpreterTool, FilePurpose
from azure.identity import ClientSecretCredential
from pathlib import Path

# Authenticate and initialize client
credential = ClientSecretCredential(
    tenant_id=os.getenv("TENANT_ID"),
    client_id=os.getenv("CLIENT_ID"),
    client_secret=os.getenv("CLIENT_SECRET")
)
project_client = AIProjectClient.from_connection_string(credential=credential, conn_str=os.getenv("PROJECT_CONNECTION_STRING"))

# Upload file
file = project_client.agents.upload_file_and_poll(file_path="sales_data.csv", purpose=FilePurpose.AGENTS)
print(f"Uploaded file, file ID: {file.id}")

# Create agent and interact
with project_client:
    agent = project_client.agents.create_agent(
        model="gpt-35-turbo",
        name="my-agent-for-code-interpreter",
        instructions="You are a helpful agent that perform Data Analysis and Visualiation",
        tools=CodeInterpreterTool(file_ids=[file.id]).definitions,
        tool_resources=CodeInterpreterTool(file_ids=[file.id]).resources
    )
    print(f"Created agent, agent ID: {agent.id}")

    thread = project_client.agents.create_thread()
    print(f"Created thread, thread ID: {thread.id}")

    while True:
        if (user_message := input("User: ")).lower() == "end":
            print("Ending conversation.")
            break

        project_client.agents.create_message(thread_id=thread.id, role="user", content=user_message)
        run = project_client.agents.create_and_process_run(thread_id=thread.id, agent_id=agent.id)
        print(f"Run finished with status: {run.status}")

        if run.status == "failed":
            print(f"Run failed: {run.last_error}")

        latest_message = next(msg for msg in project_client.agents.list_messages(thread_id=thread.id).data if msg.role == "assistant")
        if agent_response := next((content.text.value for content in latest_message.content if content.type == "text"), None):
            print(f"Agent: {agent_response}")

        for content in latest_message.content:
            if content.type == "image_file":
                file_name = f"{content.image_file.file_id}_image_file.png"
                project_client.agents.save_file(file_id=content.image_file.file_id, file_name=file_name)
                print(f"Saved image file to: {Path.cwd() / file_name}")

    project_client.agents.delete_agent(agent.id)
    print("Deleted agent")